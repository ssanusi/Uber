type GetChatResponse {
  status: String!
  error: String
  chat: Chat
}

type Query {
  getChat(chatId: ID!): GetChatResponse!
  getMyPlaces: GetMyPlacesResponse!
  getNearbyRide: GetNearbyRideResponse!
  getRide(rideId: String!): GetRideResponse!
  getMyProfile: GetMyProfileResponse!
  getNearbyDrivers: GetNearbyDriversResponse!
  user: User
}

type Chat {
  id: ID!
  messages: [Message]!
  passengerId: ID!
  passenger: User!
  driverId: ID
  driver: User!
  rideId: ID
  ride: Ride!
  createdAt: String!
  updatedAt: String
}

type Message {
  id: ID!
  text: String!
  user: User!
  chat: Chat!
  createdAt: String!
  updatedAt: String
}

type AddPlaceResponse {
  status: String!
  error: String
}

input AddPlacesInput {
  name: String!
  log: Float!
  lat: Float!
  address: String!
  isFav: Boolean!
}

type Mutation {
  addPlace(input: AddPlacesInput): AddPlaceResponse!
  deletePlace(placeId: String!): DeletePlaceResponse!
  editPlace(input: EditPlaceInput!): EditPlaceResponse!
  requestRide(input: RequestRideInput): RequestRideResponse!
  updateRideStatus(input: updateRideStatusInput!): UpdateRideStatusResponse!
  completeEmailVerification(key: String!): CompleteEmailVerificationResponse!
  completePhoneVerification(input: CompletePhoneVerificationInput!): CompletePhoneVerificationResponse!
  emailSignIn(input: EmailSignInInput!): EmailSignInResponse!
  emailSignUp(input: EmailSignUpInput!): EmailSignUpResponse!
  facebookConnect(input: FacebookUserInput!): FacebookResponse!
  reportMovement(input: ReportMovementInput!): ReportMovementResponse!
  requestEmailVerification: RequestEmailVerificationResponse!
  startPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
  toggleDrivingMode: ToggleDrivingModeResponse!
  updateMyProfile(input: UpdateMyProfileInput!): UpdateMyProfileResponse!
}

type DeletePlaceResponse {
  status: String!
  error: String
}

type EditPlaceResponse {
  status: String!
  error: String
}

input EditPlaceInput {
  placeId: String!
  name: String
  isFav: Boolean
}

type GetMyPlacesResponse {
  status: String!
  error: String
  places: [Place]
}

type Place {
  id: ID!
  name: String!
  lat: Float!
  log: Float!
  address: String!
  isFav: Boolean!
  userId: ID!
  user: User!
  createdAt: String!
  updatedAt: String
}

type GetNearbyRideResponse {
  status: String!
  error: String
  ride: Ride
}

type GetRideResponse {
  status: String!
  error: String
  ride: Ride
}

type Subscription {
  nearbyRideSubscription: Ride
  rideStatusSubscription: Ride
  driverSubscription: User
}

type RequestRideResponse {
  status: String!
  error: String
  ride: Ride
}

enum statusType {
  ACCEPTED
  CANCELED
  TRANSIT
  REQUESTING
  FINISHED
}

input RequestRideInput {
  status: statusType!
  pickupAddress: String!
  pickupLog: Float!
  pickupLat: Float!
  dropOffAddress: String!
  dropOffLog: Float!
  dropOffLat: Float!
  price: Float!
  duration: String!
}

type Ride {
  id: ID!
  status: String!
  pickupAddress: String!
  pickupLog: Float!
  pickupLat: Float!
  dropOffAddress: String!
  dropOffLog: Float!
  dropOffLat: Float!
  price: Float!
  duration: String!
  driver: User
  driverId: String
  passenger: User!
  passengerId: String!
  createdAt: String!
  updatedAt: String
}

type UpdateRideStatusResponse {
  status: String!
  error: String
}

input updateRideStatusInput {
  status: statusType!
  rideId: String!
}

type CompleteEmailVerificationResponse {
  status: String!
  error: String
}

type CompletePhoneVerificationResponse {
  status: String!
  error: String
  token: String
}

input CompletePhoneVerificationInput {
  phoneNumber: String!
  key: String!
}

input EmailSignInInput {
  email: String!
  password: String!
}

type EmailSignInResponse {
  status: String!
  error: String
  token: String
}

input EmailSignUpInput {
  firstName: String!
  lastName: String!
  email: EmailAddress!
  password: String!
  profilePhoto: String!
  phoneNumber: String!
  age: Int!
}

type EmailSignUpResponse {
  status: String!
  error: String
  token: String
}

input FacebookUserInput {
  firstName: String!
  lastName: String!
  email: String
  fbId: String!
}

type FacebookResponse {
  status: String!
  error: String
  token: String
}

type GetMyProfileResponse {
  status: String!
  error: String
  user: User
}

type GetNearbyDriversResponse {
  status: String!
  error: String
  drivers: [User]
}

type ReportMovementResponse {
  status: String!
  error: String
}

input ReportMovementInput {
  lastLat: Float
  lastLog: Float
  lastOrientation: Float
}

type RequestEmailVerificationResponse {
  status: String!
  error: String
}

scalar EmailAddress

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String
  age: Int
  email: EmailAddress
  verifiedEmail: Boolean!
  password: String
  phoneNumber: String
  verifiedPhoneNumber: Boolean!
  profilePhoto: String!
  isDriving: Boolean!
  isTaken: Boolean!
  isRiding: Boolean!
  lastLat: Float
  lastLog: Float
  lastOrientation: Float
  places: [Place]
  chatAsDriver: [Chat]
  chatAsPassenger: [Chat]
  fbId: String
  messages: [Message]
  rideAsPassenger: [Ride]
  rideAsDriver: [Ride]
  createdAt: String!
  updatedAt: String
}

type StartPhoneVerificationResponse {
  status: String!
  error: String
}

type ToggleDrivingModeResponse {
  status: String!
  error: String
}

type UpdateMyProfileResponse {
  status: String!
  error: String
}

input UpdateMyProfileInput {
  firstName: String
  lastName: String
  email: EmailAddress
  password: String
  profilePhoto: String
  age: Int
}

type Verification {
  id: ID!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String
}
